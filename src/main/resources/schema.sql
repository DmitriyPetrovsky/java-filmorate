CREATE TABLE IF NOT EXISTS rating (
                                rating_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                name varchar(10)
);

CREATE TABLE IF NOT EXISTS genre (
                                genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                name varchar(40)
);

CREATE TABLE IF NOT EXISTS films (
                                film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                title varchar(100) NOT NULL,
                                description varchar(200),
                                release_date date,
                                duration INTEGER,
                                rating INTEGER REFERENCES rating (rating_id),
                                created_at timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE IF NOT EXISTS users (
                                user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                login varchar(40) NOT NULL,
                                name varchar(40),
                                email varchar(40) NOT NULL,
                                birthday date,
                                created_at timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE IF NOT EXISTS likes (
                                id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                film_id INTEGER REFERENCES films (film_id),
                                user_id INTEGER REFERENCES users (user_id),
                                UNIQUE (film_id, user_id)
);

CREATE TABLE IF NOT EXISTS film_genre (
                                id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                film_id INTEGER REFERENCES films (film_id),
                                genre_id INTEGER REFERENCES genre (genre_id)
);

CREATE TABLE IF NOT EXISTS friends (
                                id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                friending_user_id INTEGER REFERENCES users (user_id),
                                friended_user_id INTEGER REFERENCES users (user_id),
                                accepted boolean DEFAULT FALSE,
                                CHECK (friending_user_id <> friended_user_id)
);